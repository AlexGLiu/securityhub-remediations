AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security Hub Remediations Workshop - Base Environment'
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    Description: 'See https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/'
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: 'VpcId of where to create resources required for the Workshop'
  CostCenter:
    Type: 'String'
    Default: 'SecurityHubWorkshop'
    Description: 'Value to use for the CostCenter tag applied to taggable resources created by this Workshop'
  CreateCloud9Instance:
    Type: 'String'
    Description: 'Boolean value if a Cloud9 instance should be created.  Optional, not required'
    AllowedValues:
      - False
      - True
    Default: True
  Cloud9InstanceType:
    Type: 'String'
    Default: 't2.micro'
    Description: 'The type of instance for the Cloud9 environment (for example, t2.micro)'
  TestTargetInstanceType:
    Type: 'String'
    Default: 't2.micro'
    Description: 'The type of instance for the Remediation Test Target (for example, t2.micro)'

Conditions:
  CreateCloud9Instance: !Equals [ !Ref CreateCloud9Instance, True]
  
Resources:
  SecHubWorkshopEnv:
    Condition: CreateCloud9Instance
    Type: AWS::Cloud9::EnvironmentEC2
    Properties: 
      Description: "Security Hub Remediations Workshop"
      InstanceType: !Ref "Cloud9InstanceType"
      Name: SecHubWorkshop
    # OwnerArn: 
    # SubnetId:

  TestTargetHighRiskPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: "SecurityHubRemediationWorkshopTestTargetHighRisk"
      Description: "Allows reading objects from any bucket"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Sid: "Module4Overpriviledged"
            Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource: "*"
  
  CliHostPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: "SecurityHubWorkshopCliHost"
      Description: "Enables the cli host to invoke AWS apis"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: 
              - "ec2:StartInstances"
              - "ec2:TerminateInstances"
              - "ec2:Describe*"
              - "guardduty:CreateSampleFindings"
              - "guardduty:ArchiveFindings"
              - "ssm:SendCommand"
            Resource: "*"

              
  CloudCustodianManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: CloudCustodian
      Description: "Used for both deploying CloudCustodian policies and for Execution"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Sid: "CCWrite"
            Effect: "Allow"
            Action: 
              - "ssm:SendCommand"
              - "ssm:CreateOpsItem"
              - "iam:DeleteAccessKey"
              - "iam:UpdateAccessKey"
              - "iam:Tag*"
              - "iam:UnTag*"
              - "kms:UntagResource"
              - "kms:TagResource"
              - "events:PutRule"
              - "events:PutTargets"
              - "ec2:CreateImage"
              - "ec2:CreateSnapshot*"
              - "ec2:CreateTags"
              - "ec2:DeleteTags"
              - "ec2:ModifyVpcAttribute"
              - "ec2:ModifyInstanceAttribute"
              - "ec2:AssociateIamInstanceProfile"
              - "ec2:DisassociateIamInstanceProfile"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:RevokeSecurityGroupIngress"
              - "ec2:StopInstances"
              - "ec2:TerminateInstances"
              - "config:PutEvaluations"
              - "s3:PutBucketTagging"
              - "tag:TagResources"
              - "tag:UntagResources"
            Resource: "*"
          -
            Sid: "CCDeployLambdas"
            Effect: "Allow"
            Action: 
              - "lambda:CreateFunction"
              - "lambda:TagResource"
              - "lambda:InvokeFunction"
              - "lambda:UpdateFunctionConfiguration"
              - "lambda:UntagResource"
              - "lambda:UpdateAlias"
              - "lambda:UpdateFunctionCode"
              - "lambda:AddPermission"
              - "lambda:DeleteFunction"
              - "lambda:RemovePermission"
              - "lambda:CreateAlias"
              - "lambda:GetFunction"
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:custodian-*'
          -
            Sid: "CCPassRole"
            Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/CloudCustodian'
          -
            Sid: "CCSecurityHub"
            Effect: "Allow"
            Action:
              - "securityhub:UpdateFindings"
              - "securityhub:BatchImportFindings"
              - "securityhub:CreateActionTarget"
              - "securityhub:UpdateActionTarget"
            Resource: "*"
  
  TestTargetRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: "SecurityHubRemediationWorkshopTestTarget"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com" 
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - Ref: "TestTargetHighRiskPolicy"
  
  CliInstance:            
    Type: AWS::IAM::Role
    Properties:
      RoleName: "SecurityHubRemediationWorkshopCli"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com" 
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - Ref: "CliHostPolicy"
        
  CliInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "SecurityHubRemediationWorkshopCli"
      Path: "/"
      Roles:
        - Ref: "CliInstance"
        
  TestTargetInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "SecurityHubRemediationWorkshopTestTarget"
      Path: "/"
      Roles:
        - Ref: "TestTargetRole"      

  CloudCustodian: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: "CloudCustodian"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
              AWS: 
                - Fn::GetAtt: [CliInstance, Arn]
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/SecurityAudit"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - Ref: "CloudCustodianManagedPolicy"

  RemediationTargetSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "SecurityHub Remediation Test Target" 
      GroupName: "SecurityHubRemediationsTestTarget"
      Tags: 
        - 
          Key: "Name"
          Value: "SecurityHubRemediationsTestTarget"
        - Key: "CostCenter"
          Value: !Ref "CostCenter"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: "Public ingress to port 443 however the EC2 instance it will be attached to will not have a process listening to that port, and is udp rather than tcp to cut the noise"
          FromPort: 443
          ToPort: 443
          IpProtocol: udp
          
  RemediationTestTarget:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref "LatestAmiId" 
      InstanceType: !Ref "TestTargetInstanceType"
      Tags:
        - Key: "Name"
          Value: "RemediationTestTarget"
        - Key: "CostCenter"
          Value: !Ref "CostCenter"  
      SecurityGroupIds:
        - Ref: "RemediationTargetSG"
      IamInstanceProfile: !Ref "TestTargetInstanceProfile"
  
  GeneratedFindingUser:    
    Type: AWS::IAM::User
    Properties: 
      UserName: GeneratedFindingUserName
      
  GeneratedFindingUserAccessKey: 
    DependsOn: GeneratedFindingUser
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: GeneratedFindingUserName