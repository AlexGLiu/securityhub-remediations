AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security Hub Remediations Workshop - Base Environment'
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  SecHubWorkshopEnv:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties: 
      Description: "Security Hub Remediations Workshop"
      InstanceType: t2.micro
      Name: SecHubWorkshop
  
  Cloud9InstancePolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: Cloud9RemediationTesting
      Roles: 
        - Ref: "Cloud9Instance"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: "Allow"
            Action: 
              - "ec2:StartInstance"
              - "ec2:Describe*"
              - "guardduty:CreateSampleFindings"
            Resource: "*"
          -    
            Effect: "Allow"
            Action: 
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/ssm/AWS-RunShellScript*'
          -
            Effect: "Allow"
            Action: 
              - "ssm:SendCommand"
              - "ssm:DescribeAssociation"
              - "ssm:GetDeployablePatchSnapshotForInstance"
              - "ssm:GetDocument"
              - "ssm:DescribeDocument"
              - "ssm:GetManifest"
              - "ssm:GetParameters"
              - "ssm:ListAssociations"
              - "ssm:ListInstanceAssociations"
              - "ssm:PutInventory"
              - "ssm:PutComplianceItems"
              - "ssm:PutConfigurePackageResult"
              - "ssm:StartAutomationExecution"
              - "ssm:UpdateAssociationStatus"
              - "ssm:UpdateInstanceAssociationStatus"
              - "ssm:UpdateInstanceInformation"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "ssmmessages:CreateControlChannel"
              - "ssmmessages:CreateDataChannel"
              - "ssmmessages:OpenControlChannel"
              - "ssmmessages:OpenDataChannel"
              - "ec2messages:AcknowledgeMessage"
              - "ec2messages:DeleteMessage"
              - "ec2messages:FailMessage"
              - "ec2messages:GetEndpoint"
              - "ec2messages:GetMessages"
              - "ec2messages:SendReply"
            Resource: "*"
          - 
            Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource: "*"
              
  CloudCustodianPolicy:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: CloudCustodian
      Roles: 
        - Ref: "CloudCustodian"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Sid: "CCWrite"
            Effect: "Allow"
            Action: 
              - "ssm:SendCommand"
              - "ssm:CreateOpsItem"
              - "iam:DeleteAccessKey"
              - "iam:UpdateAccessKey"
              - "iam:Tag*"
              - "iam:UnTag*"
              - "kms:UntagResource"
              - "kms:TagResource"
              - "events:PutRule"
              - "events:PutTargets"
              - "ec2:CreateImage"
              - "ec2:CreateSnapshot*"
              - "ec2:CreateTags"
              - "ec2:DeleteTags"
              - "ec2:ModifyVpcAttribute"
              - "ec2:ModifyInstanceAttribute"
              - "ec2:AssociateIamInstanceProfile"
              - "ec2:DisassociateIamInstanceProfile"
              - "ec2:StopInstances"
              - "ec2:TerminateInstances"
              - "config:PutEvaluations"
              - "s3:PutBucketTagging"
              - "tag:TagResources"
              - "tag:UntagResources"
            Resource: "*"
          -
            Sid: "CCDeployLambdas"
            Effect: "Allow"
            Action: 
              - "lambda:CreateFunction"
              - "lambda:TagResource"
              - "lambda:InvokeFunction"
              - "lambda:UpdateFunctionConfiguration"
              - "lambda:UntagResource"
              - "lambda:UpdateAlias"
              - "lambda:UpdateFunctionCode"
              - "lambda:AddPermission"
              - "lambda:DeleteFunction"
              - "lambda:RemovePermission"
              - "lambda:CreateAlias"
              - "lambda:GetFunction"
            Resource:
              - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:custodian-*'
          -
            Sid: "CCPassRole"
            Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource:
              - !Sub 'arn:aws:iam::${AWS::AccountId}:role/CloudCustodian'
          -
            Sid: "CCSecurityHub"
            Effect: "Allow"
            Action:
              - "securityhub:UpdateFindings"
              - "securityhub:BatchImportFindings"
              - "securityhub:CreateActionTarget"
              - "securityhub:UpdateActionTarget"
            Resource: "*"
          -
            Sid: "CCLogs"
            Effect: "Allow"
            Action: 
              - "logs:CreateLogStream"
              - "logs:CreateLogGroup"
              - "logs:PutLogEvents"
            Resource: 
              - "*"
  
  Cloud9Instance:            
    Type: AWS::IAM::Role
    Properties:
      RoleName: Cloud9Instance
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com" 
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  Cloud9InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "Cloud9Instance"
      Path: "/"
      Roles:
        - Ref: "Cloud9Instance"

  CloudCustodian: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudCustodian
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
              AWS: 
                - Fn::GetAtt: [Cloud9Instance, Arn]
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns: 
        - "arn:aws:iam::aws:policy/SecurityAudit"
      Path: "/"
  RemediationTargetSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "SecurityHub Remediation Test Target" 
      GroupName: SecurityHubRemediationsTestTarget
      Tags: 
        - 
          Key: "Name"
          Value: "SecurityHubRemediationsTestTarget"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: "Public ingress to port 443 however the EC2 instance it will be attached to will not have a process listening to that port"
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          
  RemediationTestTarget:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref "LatestAmiId" 
      InstanceType: "t2.micro"
      Tags:
        - Key: "Name"
          Value: "RemediationTestTarget"
      SecurityGroupIds:
        - Ref: "RemediationTargetSG"
      IamInstanceProfile: !Ref "Cloud9InstanceProfile"
  
  GeneratedFindingUser:    
    Type: AWS::IAM::User
    Properties: 
      UserName: GeneratedFindingUserName
      
  GeneratedFindingUserAccessKey: 
    DependsOn: GeneratedFindingUser
    Type: AWS::IAM::AccessKey
    Properties: 
      UserName: GeneratedFindingUserName